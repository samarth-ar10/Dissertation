# This is an auto generated Dockerfile for gazebo:gzserver11
# generated from docker_images/create_gzserver_image.Dockerfile.em
FROM ubuntu:jammy

# making it non-interactive
ENV DEBIAN_FRONTEND=noninteractive
# set QEMU_AUDIO_DRV to none to prevent warning
ENV QEMU_AUDIO_DRV=none

# setup timezone
RUN echo 'Etc/UTC' > /etc/timezone && \
    ln -s /usr/share/zoneinfo/Etc/UTC /etc/localtime && \
    apt-get update && \
    apt-get install -q -y --no-install-recommends tzdata && \
    rm -rf /var/lib/apt/lists/*

# install packages
RUN apt-get update && apt-get install -q -y --no-install-recommends \
    dirmngr \
    gnupg2 \
    && rm -rf /var/lib/apt/lists/*

# setup keys
RUN set -eux; \
    key='D2486D2DD83DB69272AFE98867170598AF249743'; \
    export GNUPGHOME="$(mktemp -d)"; \
    gpg --batch --keyserver keyserver.ubuntu.com --recv-keys "$key"; \
    mkdir -p /usr/share/keyrings; \
    gpg --batch --export "$key" > /usr/share/keyrings/gazebo-latest-archive-keyring.gpg; \
    gpgconf --kill all; \
    rm -rf "$GNUPGHOME"

# setup sources.list
RUN echo "deb [ signed-by=/usr/share/keyrings/gazebo-latest-archive-keyring.gpg ] http://packages.osrfoundation.org/gazebo/ubuntu-stable jammy main" > /etc/apt/sources.list.d/gazebo-stable.list

# Install gazebo packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    gazebo \
    && rm -rf /var/lib/apt/lists/*

# setup ROS 2 keys
RUN set -eux; \
    key='C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654'; \
    export GNUPGHOME="$(mktemp -d)"; \
    gpg --batch --keyserver keyserver.ubuntu.com --recv-keys "$key"; \
    mkdir -p /usr/share/keyrings; \
    gpg --batch --export "$key" > /usr/share/keyrings/ros2-latest-archive-keyring.gpg; \
    gpgconf --kill all; \
    rm -rf "$GNUPGHOME"

# setup ROS 2 sources.list
RUN echo "deb [ signed-by=/usr/share/keyrings/ros2-latest-archive-keyring.gpg ] http://packages.ros.org/ros2/ubuntu jammy main" > /etc/apt/sources.list.d/ros2-latest.list

# setup environment
ENV LANG C.UTF-8
ENV LC_ALL C.UTF-8

ENV ROS_DISTRO humble

# Install ROS 2 packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    ros-humble-desktop\
    && rm -rf /var/lib/apt/lists/*

# Setup environment
ENV LANG C.UTF-8
ENV LC_ALL C.UTF-8
ENV ROS_DISTRO humble

# setup Gazebo environment
RUN echo "source /usr/share/gazebo/setup.sh" >> ~/.bashrc

# setup ROS 2 environment
RUN echo "source /opt/ros/$ROS_DISTRO/setup.bash" >> ~/.bashrc

# setup environment
EXPOSE 11345

COPY container_menu.sh /root/container_menu.sh
RUN chmod +x /root/container_menu.sh


# Install necessary tools and dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    git \
    python3-colcon-common-extensions \
    python3-rosdep \
    python3-vcstool \
    wget \
    python3-pip \
    ros-humble-ros2-control \
    ros-humble-ros2-controllers \
    ros-humble-gazebo-ros2-control \
    ros-humble-robot-state-publisher \
    ros-humble-rviz2 \
    ros-humble-ur-controllers \
    ros-humble-ur-gazebo \
    ros-humble-ur-moveit-config \
    ros-humble-ament-cmake \
    ros-humble-ign-ros2-control \
    && rm -rf /var/lib/apt/lists/*

RUN apt-get update && apt-get install -y \
    ros-humble-ros-gz-sim \
    ros-humble-ur-client-library \
    && rm -rf /var/lib/apt/lists/*
# Initialize rosdep
RUN rosdep init && rosdep update

# setting up Universal_Robots_ROS2_GZ_Simulation
RUN export COLCON_WS=~/workspaces/ur_gz && \
    mkdir -p $COLCON_WS/src

# setting up Universal_Robots_ROS2_GZ_Simulation
RUN cd $COLCON_WS && \
    # git clone -b humble https://github.com/UniversalRobots/Universal_Robots_ROS2_Ignition_Simulation.git src/ur_simulation_gz && \
    git clone -b humble https://github.com/UniversalRobots/Universal_Robots_ROS2_Driver.git src/ur_robot_driver

# Install missing dependencies manually
RUN apt-get update && \
    apt-get install -y ros-humble-gz-ros2-control || true

# Install dependencies using rosdep
RUN cd $COLCON_WS && \
    rosdep update && \
    rosdep install --ignore-src --from-paths src -y || true

# Configure and build the workspace
RUN /bin/bash -c "source /opt/ros/humble/setup.bash && \
    cd $COLCON_WS && \
    colcon build --symlink-install"

# setting up Universal_Robots_ROS2_GZ_Simulation
RUN echo "source $COLCON_WS/install/setup.bash" >> ~/.bashrc

# Copy the start_simulation.sh script into the container 
COPY container_menu.sh /root/container_menu.sh
RUN chmod +x /root/container_menu.sh

# Print the IP address, then start gazebo with the ur3 launch file
# CMD ["/bin/bash", "-c", "hostname -I && /root/container_menu.sh"]

CMD ["/bin/bash", "-c", "hostname -I && gzserver"]