# Use the official Ubuntu 22.04 image as a base
FROM ubuntu:jammy

# Set QEMU_AUDIO_DRV to none to prevent warning
ENV QEMU_AUDIO_DRV=none

# Setup timezone
RUN echo 'Etc/UTC' > /etc/timezone && \
    ln -s /usr/share/zoneinfo/Etc/UTC /etc/localtime && \
    apt-get update && \
    apt-get install -q -y --no-install-recommends tzdata && \
    rm -rf /var/lib/apt/lists/*

# Install packages
RUN apt-get update && apt-get install -q -y --no-install-recommends \
    dirmngr \
    gnupg2 \
    && rm -rf /var/lib/apt/lists/*

# Setup keys
RUN set -eux; \
    key='D2486D2DD83DB69272AFE98867170598AF249743'; \
    export GNUPGHOME="$(mktemp -d)"; \
    gpg --batch --keyserver keyserver.ubuntu.com --recv-keys "$key"; \
    mkdir -p /usr/share/keyrings; \
    gpg --batch --export "$key" > /usr/share/keyrings/gazebo-latest-archive-keyring.gpg; \
    gpgconf --kill all; \
    rm -rf "$GNUPGHOME"

# Setup sources.list
RUN echo "deb [signed-by=/usr/share/keyrings/gazebo-latest-archive-keyring.gpg] http://packages.osrfoundation.org/gazebo/ubuntu-stable jammy main" > /etc/apt/sources.list.d/gazebo-stable.list

# Install Gazebo packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    gazebo \
    && rm -rf /var/lib/apt/lists/*

# Setup ROS 2 keys
RUN set -eux; \
    key='C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654'; \
    export GNUPGHOME="$(mktemp -d)"; \
    gpg --batch --keyserver keyserver.ubuntu.com --recv-keys "$key"; \
    mkdir -p /usr/share/keyrings; \
    gpg --batch --export "$key" > /usr/share/keyrings/ros2-latest-archive-keyring.gpg; \
    gpgconf --kill all; \
    rm -rf "$GNUPGHOME"

# Setup ROS 2 sources.list
RUN echo "deb [signed-by=/usr/share/keyrings/ros2-latest-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu jammy main" > /etc/apt/sources.list.d/ros2-latest.list

# Setup environment
ENV LANG C.UTF-8
ENV LC_ALL C.UTF-8
ENV ROS_DISTRO humble

# Install ROS 2 packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    ros-humble-desktop \
    && rm -rf /var/lib/apt/lists/*

# Setup Gazebo and ROS 2 environment
RUN echo "source /usr/share/gazebo/setup.sh" >> ~/.bashrc
RUN echo "source /opt/ros/$ROS_DISTRO/setup.bash" >> ~/.bashrc

# Install necessary tools and dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    git \
    python3-colcon-common-extensions \
    python3-rosdep \
    python3-vcstool \
    wget \
    python3-pip \
    ros-humble-ros2-control \
    ros-humble-ros2-controllers \
    ros-humble-gazebo-ros2-control \
    ros-humble-robot-state-publisher \
    ros-humble-rviz2 \
    ros-humble-ur-controllers \
    ros-humble-ur-moveit-config \
    ros-humble-ament-cmake \
    liburdfdom-tools \
    && rm -rf /var/lib/apt/lists/*

# Initialize rosdep
RUN rosdep init && rosdep update

# Create and setup ROS workspace
ENV COLCON_WS=/root/workspaces/ur_gz
RUN mkdir -p $COLCON_WS/src

# Clone the required repositories
RUN cd $COLCON_WS/src && \
    git clone -b ros2 https://github.com/UniversalRobots/Universal_Robots_ROS2_Gazebo_Simulation.git && \
    git clone -b humble https://github.com/UniversalRobots/Universal_Robots_ROS2_Description.git ur_description && \
    rosdep update && rosdep install --ignore-src --from-paths . -y

# List the contents of the ur_description directory to verify the presence of the required files
RUN ls -R $COLCON_WS/src/ur_description

# Source ROS 2 setup script and build the workspace
RUN /bin/bash -c "source /opt/ros/humble/setup.bash && cd $COLCON_WS && colcon build --symlink-install"

# Source the workspace
RUN echo "source $COLCON_WS/install/setup.bash" >> ~/.bashrc

# Copy the launch file and menu script into the container
COPY ur_sim_control.launch.py $COLCON_WS/src/Universal_Robots_ROS2_Gazebo_Simulation/launch/
COPY container_menu.sh /root/

RUN chmod +x /root/container_menu.sh

# Set the entrypoint
ENTRYPOINT ["/bin/bash", "-c", "source /opt/ros/humble/setup.bash && source $COLCON_WS/install/setup.bash && exec \"$@\"", "--"]

# Keep the container running
# CMD ["tail", "-f", "/dev/null"]

# Print the IP address, then start the container menu
CMD ["/bin/bash", "/root/container_menu.sh"]
