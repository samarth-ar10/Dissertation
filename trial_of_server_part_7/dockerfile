FROM ros:rolling-ros-core-jammy

# setup environment
ENV LANG C.UTF-8

# install packages
RUN apt-get update && apt-get install -q -y --no-install-recommends \
    dirmngr \
    gnupg2 \
    git \
    wget \
    && rm -rf /var/lib/apt/lists/*

# setup keys
RUN set -eux; \
    key='D2486D2DD83DB69272AFE98867170598AF249743'; \
    export GNUPGHOME="$(mktemp -d)"; \
    gpg --batch --keyserver keyserver.ubuntu.com --recv-keys "$key"; \
    mkdir -p /usr/share/keyrings; \
    gpg --batch --export "$key" > /usr/share/keyrings/gazebo-latest-archive-keyring.gpg; \
    gpgconf --kill all; \
    rm -rf "$GNUPGHOME"

# setup sources.list
RUN echo "deb [ signed-by=/usr/share/keyrings/gazebo-latest-archive-keyring.gpg ] http://packages.osrfoundation.org/gazebo/ubuntu-stable jammy main" > /etc/apt/sources.list.d/gazebo-stable.list

# Install gazebo_ros package
RUN apt-get update && apt-get install -y \
    ros-${ROS_DISTRO}-gazebo-ros-pkgs \
    && rm -rf /var/lib/apt/lists/*

# # Source ROS 2 setup file and build the project
# RUN /bin/bash -c "source /opt/ros/${ROS_DISTRO}/setup.bash && colcon build --symlink-install"


#--------------------------------------UR_ROBOT_DRIVER--------------------------------------#

# install ur_robot_driver
RUN apt-get update && apt-get install -y --no-install-recommends \
    ros-${ROS_DISTRO}-ur \
    && rm -rf /var/lib/apt/lists/*

# Note - it is recommended to set up PREEMPT_RT for smoother real time performace especially for the new e series robots. However, this is a docker container 
#   which doesn't change the underlying kernel. So, setting up PREEMPT_RT is not possible in this case.

#finish setup
RUN echo "source /opt/ros/$ROS_DISTRO/setup.bash" >> ~/.bashrc


#--------------------------------------UR_ROBOT_GAZEBO--------------------------------------#

# Create a colcon workspace:
ENV COLCON_WS=/root/workspaces/ur_gazebo
RUN mkdir -p $COLCON_WS/src

# Install all the dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    cmake \
    python3-colcon-common-extensions \
    python3-rosdep \
    python3-vcstool \
    ros-${ROS_DISTRO}-ament-cmake \
    ros-${ROS_DISTRO}-xacro \
    ros-${ROS_DISTRO}-ur-msgs \
    ros-${ROS_DISTRO}-ur-client-library \
    ros-${ROS_DISTRO}-action-msgs \
    ros-${ROS_DISTRO}-ament-lint-common \
    && rm -rf /var/lib/apt/lists/*

# Install dependencies for control_manager
RUN apt-get update && apt-get install -y --no-install-recommends \
    ros-${ROS_DISTRO}-ros2-control \
    ros-${ROS_DISTRO}-ros2-controllers \
    && rm -rf /var/lib/apt/lists/*

# Create the 'realtime' group and add the user to it
RUN addgroup realtime && usermod -a -G realtime $(whoami)

# Add limits for the 'realtime' group in /etc/security/limits.conf
RUN echo "@realtime soft rtprio 99" >> /etc/security/limits.conf && \
    echo "@realtime soft priority 99" >> /etc/security/limits.conf && \
    echo "@realtime soft memlock 102400" >> /etc/security/limits.conf && \
    echo "@realtime hard rtprio 99" >> /etc/security/limits.conf && \
    echo "@realtime hard priority 99" >> /etc/security/limits.conf && \
    echo "@realtime hard memlock 102400" >> /etc/security/limits.conf


# Initialize rosdep
RUN rosdep init && rosdep update

# Download the required repositories
RUN cd $COLCON_WS/src && \
    git clone -b ros2 https://github.com/UniversalRobots/Universal_Robots_ROS2_Gazebo_Simulation.git

# Set the working directory
WORKDIR $COLCON_WS

# Create the ROS 2 workspace and import the ros_controls repositories
RUN mkdir -p ~/ros2_ws/src && \
    cd ~/ros2_ws/ && \
    wget https://raw.githubusercontent.com/ros-controls/ros2_control_ci/master/ros_controls.$ROS_DISTRO.repos && \
    vcs import src < ros_controls.$ROS_DISTRO.repos

# Update rosdep and install dependencies
RUN rosdep update --rosdistro=$ROS_DISTRO && \
    sudo apt-get update && \
    rosdep install --from-paths src --ignore-src -r -y

# Source ROS 2 setup file and build the project
RUN /bin/bash -c "source /opt/ros/${ROS_DISTRO}/setup.bash && colcon build --symlink-install"

# Source the setup.bash file
RUN echo "source $COLCON_WS/install/setup.bash" >> ~/.bashrc

# Source ROS 2 setup file and build the project again
RUN /bin/bash -c "source /opt/ros/${ROS_DISTRO}/setup.bash && colcon build --symlink-install"

# Verify if ur_simulation_gazebo is ready
RUN /bin/bash -c "source /root/workspaces/ur_gazebo/install/setup.bash && ros2 pkg list | grep ur_simulation_gazebo"

# Expose the necessary ports for Gazebo
EXPOSE 11345

# Source ROS 2 setup file and workspace setup file, then run the launch file
# CMD /bin/bash -c "source /opt/ros/${ROS_DISTRO}/setup.bash && source /root/workspaces/ur_gazebo/install/setup.bash && ros2 launch ur_simulation_gazebo ur_sim_control.launch.py"

# Verify that control_manager is installed
# RUN /bin/bash -c "source /opt/ros/${ROS_DISTRO}/setup.bash && ros2 pkg list | grep control_manager"

# Source ROS 2 setup file and workspace setup file, then run the controller manager
# CMD /bin/bash -c "source /opt/ros/${ROS_DISTRO}/setup.bash && \
#     source /root/workspaces/ur_gazebo/install/setup.bash && \
#     ros2 run controller_manager ros2_control_node"

# Health check to ensure control_manager is running
HEALTHCHECK --interval=30s --timeout=5s --retries=3 \
    CMD ros2 node list | grep "/controller_manager" || exit 1



# Set entrypoint to /bin/bash
ENTRYPOINT ["/bin/bash"]
